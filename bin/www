#!/usr/bin/env node

const app = require('../lib/app')
const debug = require('debug')('demo:app')
const http = require('http')

let port = normalizePort(process.env.service_port || '3000')
app.set('port', port)
let server = http.createServer(app)
server.on('error', onError)
server.on('listening', onListening)
server.listen(port)


// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') throw error

  let bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`

  // handle specific listen errors with friendly messages
  switch (error.code) {
      case 'EACCES':
          debug(`${bind} requires elevated privileges`)
          process.exit(1)
          break
      case 'EADDRINUSE':
          debug(`${bind} is already in use`)
          process.exit(1)
          break
      default:
          throw error
  }
}

// Event listener for HTTP server "listening" event.
function onListening() {
  let addr = server.address()
  let bind = typeof addr === 'string' ? `Pipe ${addr}` : `Port ${addr.port}`
  debug(`Listening on ${bind}`)
}

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  const portNum = parseInt(val, 10)
  if (isNaN(portNum)) return val // named pipe
  if (portNum >= 0) return portNum // port number
  return false
}

